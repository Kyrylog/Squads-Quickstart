/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
import * as web3 from '@solana/web3.js';
import * as beet from '@metaplex-foundation/beet';
import * as beetSolana from '@metaplex-foundation/beet-solana';
export const programConfigDiscriminator = [196, 210, 90, 231, 144, 149, 140, 63];
/**
 * Holds the data for the {@link ProgramConfig} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class ProgramConfig {
    authority;
    multisigCreationFee;
    treasury;
    reserved;
    constructor(authority, multisigCreationFee, treasury, reserved /* size: 64 */) {
        this.authority = authority;
        this.multisigCreationFee = multisigCreationFee;
        this.treasury = treasury;
        this.reserved = reserved;
    }
    /**
     * Creates a {@link ProgramConfig} instance from the provided args.
     */
    static fromArgs(args) {
        return new ProgramConfig(args.authority, args.multisigCreationFee, args.treasury, args.reserved);
    }
    /**
     * Deserializes the {@link ProgramConfig} from the data of the provided {@link web3.AccountInfo}.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static fromAccountInfo(accountInfo, offset = 0) {
        return ProgramConfig.deserialize(accountInfo.data, offset);
    }
    /**
     * Retrieves the account info from the provided address and deserializes
     * the {@link ProgramConfig} from its data.
     *
     * @throws Error if no account info is found at the address or if deserialization fails
     */
    static async fromAccountAddress(connection, address, commitmentOrConfig) {
        const accountInfo = await connection.getAccountInfo(address, commitmentOrConfig);
        if (accountInfo == null) {
            throw new Error(`Unable to find ProgramConfig account at ${address}`);
        }
        return ProgramConfig.fromAccountInfo(accountInfo, 0)[0];
    }
    /**
     * Provides a {@link web3.Connection.getProgramAccounts} config builder,
     * to fetch accounts matching filters that can be specified via that builder.
     *
     * @param programId - the program that owns the accounts we are filtering
     */
    static gpaBuilder(programId = new web3.PublicKey('SQDS4ep65T869zMMBKyuUq6aD6EgTu8psMjkvj52pCf')) {
        return beetSolana.GpaBuilder.fromStruct(programId, programConfigBeet);
    }
    /**
     * Deserializes the {@link ProgramConfig} from the provided data Buffer.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static deserialize(buf, offset = 0) {
        return programConfigBeet.deserialize(buf, offset);
    }
    /**
     * Serializes the {@link ProgramConfig} into a Buffer.
     * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
     */
    serialize() {
        return programConfigBeet.serialize({
            accountDiscriminator: programConfigDiscriminator,
            ...this,
        });
    }
    /**
     * Returns the byteSize of a {@link Buffer} holding the serialized data of
     * {@link ProgramConfig}
     */
    static get byteSize() {
        return programConfigBeet.byteSize;
    }
    /**
     * Fetches the minimum balance needed to exempt an account holding
     * {@link ProgramConfig} data from rent
     *
     * @param connection used to retrieve the rent exemption information
     */
    static async getMinimumBalanceForRentExemption(connection, commitment) {
        return connection.getMinimumBalanceForRentExemption(ProgramConfig.byteSize, commitment);
    }
    /**
     * Determines if the provided {@link Buffer} has the correct byte size to
     * hold {@link ProgramConfig} data.
     */
    static hasCorrectByteSize(buf, offset = 0) {
        return buf.byteLength - offset === ProgramConfig.byteSize;
    }
    /**
     * Returns a readable version of {@link ProgramConfig} properties
     * and can be used to convert to JSON and/or logging
     */
    pretty() {
        return {
            authority: this.authority.toBase58(),
            multisigCreationFee: (() => {
                const x = this.multisigCreationFee;
                if (typeof x.toNumber === 'function') {
                    try {
                        return x.toNumber();
                    }
                    catch (_) {
                        return x;
                    }
                }
                return x;
            })(),
            treasury: this.treasury.toBase58(),
            reserved: this.reserved,
        };
    }
}
/**
 * @category Accounts
 * @category generated
 */
export const programConfigBeet = new beet.BeetStruct([
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['authority', beetSolana.publicKey],
    ['multisigCreationFee', beet.u64],
    ['treasury', beetSolana.publicKey],
    ['reserved', beet.uniformFixedSizeArray(beet.u8, 64)],
], ProgramConfig.fromArgs, 'ProgramConfig');
